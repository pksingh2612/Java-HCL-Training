Map
  |
  AbstractMap class  ---------------- TreeMap class
            |
        HashMap  --- LinkedHashMap

Map interface

   - used to store collection of objects but in unique key value pairs

   - Map is unordered

 

Methods

1. int size()

2. void put(Object key, Object value) - used to store single key value pair

3. void putAll(Map m) - used to store group of key value pair

4. Object get(Object key) - it return single value for that particular key

5. Object remove(Object key) - it remove the value for that particular key

6. boolean containsKey(Object key) - to check key is present or not

7. boolean containsValue(Object val) - to check value is present or not

 

You cant apply Iterator directly, we have to convert Map to Set interface

8. Set entrySet()- convert both key and value to Set interface

9. Set keySet() - convert only key to Set interface

10. boolean equals(Object o)

11. String toString()

12. int hashCode()

 

Map.Entry interface

   - used to describe info abt key and value separately

Methods

1. Object getKey()

2. Object getValue()

 

1. HashMap class

      - HashMap class extends AbstractMap implements Map,Cloneable, Serilizable

      - Contains collection of key value pair and prints in random order

Constructor

    1. HashMap()

    2. HashMap(int capacity) - default capacity is 16

    3. HashMap(int capacity, float fillratio)

    4. HashMap(Map m)

 

import java.util.Iterator;

import java.util.Map;

import java.util.Set;

import java.util.TreeMap;

 

public class Example1 {

 

                public static void main(String[] args) {

                                //Map<String,Integer> hm=new HashMap<>();

                                //LinkedHashMap<String,Integer> hm=new LinkedHashMap<>();

                                TreeMap<String,Integer> hm=new TreeMap<>();

                               

                                System.out.println(hm.size());

                               

                                hm.put("a",10);

                                hm.put("h",20);

                                hm.put("c",25);

                                hm.put("a",23);

                                hm.put("b",24);

                               

                                System.out.println(hm.size()); //3

                                System.out.println(hm);

                               

                                System.out.println(hm.get("h"));//20

                                hm.remove("h");

                                System.out.println(hm.get("h")); //null

                                System.out.println(hm.containsKey("a"));

                                System.out.println(hm.containsValue(20));

                               

                                Set s=hm.entrySet(); //convert both key value pair

                                Iterator itr=s.iterator();

                                while(itr.hasNext()) {

                                                  Map.Entry me=(Map.Entry)itr.next();

                                                  System.out.println(me.getKey()+" "+me.getValue());

                                }

                               

                                System.out.println();

                                Set s1=hm.keySet(); //convert only key

                                Iterator itr1=s1.iterator();

                                while(itr1.hasNext()) {

                                                String key=(String)itr1.next();

                                                System.out.println(key+" "+hm.get(key));

                                }

                               

                }

 

}

 

 

2. LinkedHashMap class

     - LinkedHashMap extends HashMap implements Map

     - contains key value pair and prints in the order we have inserted

Constructor

    1. LinkedHashMap()

    2. LinkedHashMap(int capacity) - default capacity is 16

    3. LinkedHashMap(int capacity, float fillratio)

    4. LinkedHashMap(Map m)

 

3.TreeMap class

    - used to sort based only on keys

Constructor

    1. TreeMap()

    2. TreeMap(Map m)

 

4. Hashtable class

     - It is legacy class

     - similar to HashMap but it is synchronized or threadsafe and prints in random order

Constructor

   - Hashtable()

   - Hashtable(int capacity) - default capacity is 11

   - Hashtable(int capacity, float fillratio)

  - Hashtable(Map m)

import java.util.Hashtable;

import java.util.Iterator;

import java.util.Set;

 

public class Example2 {

 

                public static void main(String[] args) {

                                Hashtable<Integer,Double> ht=new Hashtable<>();

                                System.out.println(ht.size());

                               

                                ht.put(10, 3.14);

                                ht.put(2, 5.43);

                                ht.put(8, 6.12);

                                ht.put(5, 4.13);

                                ht.put(4, 1.12);

                               

                                System.out.println(ht.size()); //5

                                System.out.println(ht);

                               

                                Set s=ht.keySet();

                                Iterator itr=s.iterator();

                                while(itr.hasNext()) {

                                                Integer i=(Integer)itr.next();

                                                System.out.println(i+" "+ht.get(i));

                                }

                               

                }

 

}

 

5. Properties class

     - It is legacy class

     - Properties class is subclass of Hashtable

     - prints in random order and it is synchronized

     - contains key value pairs but key and value should be only String

 

Constructor

    1. Properties()

    2. Properties(Properties default)

 

Methods

    1. String getProperty(String key)

 

import java.util.Iterator;

import java.util.Properties;

import java.util.Set;

 

public class Example3 {

 

                public static void main(String[] args) {

                                Properties p=new Properties();

                                p.put("a", "b");

                                p.put("c", "d");

                                p.put("e", "f");

                                p.put("g", "h");

                                System.out.println(p);

                                Set s=p.keySet();

                                Iterator itr=s.iterator();

                                while(itr.hasNext()) {

                                                  String k=(String)itr.next();

                                                  System.out.println(k+" "+p.getProperty(k));

                                }

                }

 

}

 

 

Collections class

   - contains static methods that supports ur util package

 

Methods

1. static boolean addAll(Collection c) - used to add all elts to specified collection

2. static int binarySearch(List l,int value)- search a value in the list

3. static void copy(List dest,List source) - copy elts from one list to another

4. static boolean disjoint(Collection c1, Collection c2)- check whether two collection have no elements in common

5. static void fill(List l,int val) - fill the list with the valu

6. static int frequency(List l, int val) - count the frequeny of element

7. static Object max(Collection c)

8. static Object min(Collection c)

9. static void reverse(List l)

10. static boolean replaceAll(List l, Object oldval, Object newval)

11. static void shuffle(List l)

12. static Set singleton(Object o) - make Set to contain only single value

13. static List singletonList(Object o) - make List to contain only single value

14. static Map singletonMap(Object key, Object value) - make Map to contain only single value

15. static void sort(List l)

16. static void swap(List l, int i,int j)

17. static Collection synchronizedCollection(Collection c)

18. static List synchronizedList(List l)

19. static Set synchronizedSet(Set s)

20. static Map synchronizedMap(Map m)

21. static Collection unmodifiableCollection(Collection c)

22. static List unmodifiableList(List l)

23. static Set unmodifiableSet(Set s)

24. static Map unmodifiableMap(Map m)

 

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

 

public class Example4 {

 

                public static void main(String[] args) {

                                List<String> l1=new ArrayList<>();

                                l1.add("A");

                                l1.add("B");

                                l1.add("C");

                                System.out.println(l1);

                                boolean  b = Collections.addAll(l1,"D","E","F");

                                System.out.println(l1);

                               

                                int i=Collections.binarySearch(l1, "C");

                                System.out.println(i);

                               

                                List<String> src=new ArrayList<>();

                                src.add("hello");

                                src.add("world");

                               

                                List<String> dest=new ArrayList<>();

                                dest.add("he");

                                dest.add("wo");

                               

                                boolean b1=Collections.disjoint(src, dest);

                                System.out.println(b1);

                               

                                Collections.copy(dest,src);

                                System.out.println(src);

                                System.out.println(dest);

                               

                                Collections.fill(src, "welcome");

                                System.out.println(src);

                               

                                System.out.println(Collections.frequency(src,"welcome"));

                               

                                List<Integer> l2=new ArrayList<>();

                                l2.add(8);

                                l2.add(-20);

                                l2.add(20);

                                l2.add(-8);

                                System.out.println(Collections.max(l2));

                                System.out.println(Collections.min(l2));

                               

                                System.out.println(l2);

                                Collections.reverse(l2);

                                System.out.println(l2);

                                Collections.shuffle(l2);

                                System.out.println(l2);

                                boolean b2=Collections.replaceAll(l2, 8, 18);

                                System.out.println(l2);

                               

                                Collections.sort(l2);

                                System.out.println(l2);

                    Collections.swap(l2,0,2);

                    System.out.println(l2);

                               

                                String str[]= {"one","two","three"};

                                List<String> l3=new ArrayList<>(Arrays.asList(str));

                                System.out.println(l3);

                                l3=Collections.singletonList("four");

                                System.out.println(l3);

                               

                                List<Integer> l4=new ArrayList<>();

                                l4.add(1);

                                l4.add(2);

                                l4.add(3);

                                System.out.println(l4);

                                List<Integer> l5=Collections.synchronizedList(l4);

                                System.out.println(l5);

                               

                                List<Integer> l6=new ArrayList<>();

                                l6.add(1);

                                l6.add(2);

                                l6.add(3);

                                System.out.println(l6);

                               

                                List<Integer> l7=Collections.unmodifiableList(l6);

                                System.out.println(l7);

                                l7.add(4);

                }

 

}

 

 

Arrays class

   - contains static method used to perform operation on any data type array

 

Methods

1. static Arrays asList(Object[] o) - convert array to List

2. static int binarySearch(int[] a,int val)

   If the value is not present it returns a negative value using -(index)-1

3. static void sort(int[] a);

4. static void sort(int[] a,int start,int end) //start to end

5. static void fill(int[] a,int val)

6. static void fill(int[] a,int start,int end,int val)//start to end-1

7. static boolean equals(int[] a1,int[] a2)

 

- the above methods are appliable for all datatype array

 

import java.util.Arrays;

 

public class Example5 {

 

                public static void main(String[] args) {

                                int a[]= {0,-3,-6,-9,-12,-15,-18,-21,-24,-27};

               

                                Arrays.sort(a);

                                //-27 -24 -21 -18 -15 -12 -9 -6 -3 -1 0       

                               

                                for(int a1:a)

                                                System.out.println(a1);

                               

                   System.out.println(Arrays.binarySearch(a, -9));

                   System.out.println(Arrays.binarySearch(a, -11));

                    //-(index)-1=-6-1=-7

                   System.out.println(Arrays.binarySearch(a, -1));

                   //-9-1=-10

                   Arrays.sort(a,4,8);

                   for(int a2:a)

                                   System.out.println(a2);

                   System.out.println();

                   Arrays.fill(a, 2);

                   for(int a3:a)

                                   System.out.println(a3);

                   System.out.println();

                   Arrays.fill(a,2,6,3);

                   for(int a4:a)

                                   System.out.println(a4);

                }

}


    - In Set interface if we want to sort means we use TreeSet class

    - In List interface if we want to sort means we use Collections.sort(List l)

          Both case, if String means sort in alphabetical order and if number means it will sort in ascending order

       But consider, we going to have collection of Student object or Person object or Enployee object or Box object or Test object


Comparable and Comparator interface

    - used to sort collection elements

Comparable interface                                                                    Comparator interface

1. provides only single                                    1. provides multiple sorting sequence

sorting sequence, we can do                      we can do sorting based on id and

sorting either on id or                          name and age and salary

age or name or salary

2. present in java.lang.*                                2. present in java.util.*

3. public int compareTo(Object)        3. public int compare(Object o1, Object o2)) method

4. We can sort list using        4. We can sort list using

Collections.sort(List l)               Collections.sort(List l,Comparator c)

               

 

Queue interface

   - add the elements in FIFO

 

PriorityQueue class

   - where it display the element in natural order

 

Constructor

  - PriorityQueue()

 

Methods

1. boolean add(Object o) - add single object

2. boolean offer(Object o) - add single object

3. Object remove() - used to retrieve and remove the head of the queue

4. Object poll() - used to retrieve and remove the head of the queue or returns null if queue is empty

5. Object element() - used to retrieve but does not remove the head the queue

6. Object peek() -  used to retrieve but does not remove the head the queue, or returns null if queue is empty

 

package com.day7;

 

import java.util.Iterator;

import java.util.PriorityQueue;

 

public class Example8 {

 

                public static void main(String[] args) {

                   PriorityQueue<String> p=new PriorityQueue<>();

                   p.add("Amit");

                   p.add("Vinay");

                   p.add("Kiri");

                   p.add("Jaya");

                   p.offer("Ravi");

               

                   System.out.println(p.element());

                   System.out.println(p.peek());

                   Iterator itr=p.iterator();

                   while(itr.hasNext()) {

                                   System.out.println(itr.next());

                   }

                  

                   p.remove();

                   p.poll();

                   System.out.println("After removing");

                   itr=p.iterator();

                   while(itr.hasNext()) {

                                   System.out.println(itr.next());

                   }

                }

 

}

 

Date class

   - used to print date and time in Java

Constructor

  1. Date() - print current date and time

  2. Date(long msec) - print the date and time calculate from Jan 1st 1970

Methods

  1. boolean after(Date d)

  2. boolean before(Date d)

  3. int compareTo(Date d)

  4. boolean equals(Date d)

  5. int hashCode()

  6. String toString()

  7. long getTime() - return msec from Jan 1st 1970

 

import java.util.Date;

 

public class Example9 {

 

                public static void main(String[] args) {

                                Date d1=new Date();

                                System.out.println(d1);

                                Date d2=new Date(8000000000000l);

                                System.out.println(d2);

                               

                                System.out.println(d1.after(d2));

                                System.out.println(d1.before(d2));

                                System.out.println(d1.compareTo(d2));

                                System.out.println(d1.getTime());

                               

                }

 

}

 

 

Calendar class

   - abstract class used to extract useful info from date and time component

 

Constructor

  - Calendar()

 

Constants

 1. static int AM

  2. static int PM

  3. static int DAY

  4. static int HOUR

  5. static int MINUTE

  6. static int SECOND

  7. static int MONTH

  8. static int YEAR

  9. static int ERA - AD/BC

  10. static int HOUR_OF_DAY

  11. static int DAY_OF_MONTH

  12. static int DAY_OF_WEEK

  13. static int DAY_OF_WEEK_IN_MONTH

  14. static int DAY_OF_YEAR

  15. static int WEEK_OF_MONTH

  16. static int WEEK_OF_YEAR

  17. static int MONDAY --- SUNDAY

  18. static int JANUARY --- DECEMBER

 

Methods

   1. static Calendar getInstance() - create object for Calendar

   2. int get(int calendarField)    get(Calendar.HOUR)

   3. void add(int which,int val)

   4. Date getTime() - convert Calendar to Date

   5. void setTime(Date d) - convert Date to Calendar

 

package com.day7;

 

import java.util.Calendar;

 

public class Example10 {

 

                public static void main(String[] args) {

                                String month[]= {"Jan","Feb","Mar","Apr","May",

                                                                "Jun","Jul","Aug","Sep","Oct","Nov","Dec"};

                               

                                Calendar c=Calendar.getInstance(); //current date and time

                c.set(2000, 3, 23, 5, 20, 23);

                                System.out.println("Date:");      

                                System.out.println(month[c.get(Calendar.MONTH)]);

                                System.out.println(c.get(Calendar.DATE));

                                System.out.println(c.get(Calendar.YEAR));

                                System.out.println("Time:");

                                System.out.println(c.get(Calendar.HOUR)+":"

                                    +c.get(Calendar.MINUTE)+":"+c.get(Calendar.SECOND));

                                c.add(Calendar.HOUR, 2);

                                c.add(Calendar.MINUTE, 3);

                                c.add(Calendar.SECOND, 4);

                                System.out.println(c.get(Calendar.HOUR)+":"

                                                    +c.get(Calendar.MINUTE)+":"+c.get(Calendar.SECOND));

                }

 

}

 

 

GregorianCalendar class (we can create an object)

    - concrete implementation of Calendar class, used to extract info from date time component
    - we can create a object of calendar class beacause

 

Constructor

  1. GregorianCalendar() - current date and time

  2. GregorianCalendar(int year, int month, int date)

  3. GregorianCalendar(int year,  int month, int date, int hour, int minute, int second)

 

Constants

  1. static int AM

  2. static int PM

  3. static int DAY

  4. static int HOUR

  5. static int MINUTE

  6. static int SECOND

  7. static int MONTH

  8. static int YEAR

  9. static int ERA - AD/BC

  10. static int HOUR_OF_DAY

  11. static int DAY_OF_MONTH

  12. static int DAY_OF_WEEK

  13. static int DAY_OF_WEEK_IN_MONTH

  14. static int DAY_OF_YEAR

  15. static int WEEK_OF_MONTH

  16. static int WEEK_OF_YEAR

  17. static int MONDAY --- SUNDAY

  18. static int JANUARY --- DECEMBER

 

Methods

   1. int get(int calendarField)    get(Calendar.HOUR)

   2. void add(int which,int val)

   3. Date getTime() - convert Calendar to Date

   4. void setTime(Date d) - convert Date to Calendar

   5. boolean isLeapYear(int year)

 

import java.util.Calendar;

import java.util.GregorianCalendar;

 

public class Example11 {

 

                public static void main(String[] args) {

                                String month[]= {"Jan","Feb","Mar","Apr","May",

                                                                "Jun","Jul","Aug","Sep","Oct","Nov","Dec"};

                                //GregorianCalendar g=new GregorianCalendar(); //current date and time

                                GregorianCalendar g=new GregorianCalendar(2000,4, 20,4, 23,20);

                                System.out.println("Date");

                                int year=g.get(Calendar.YEAR);

                                System.out.println(year+"-"

                                    +month[g.get(Calendar.MONTH)]+"-"

                                                                +g.get(Calendar.DATE));

                               

                                System.out.println("Time:");

                                System.out.println(g.get(Calendar.HOUR)+":"

                                                                +g.get(Calendar.MINUTE)+":"

                                                                +g.get(Calendar.SECOND));

                               

                                if(g.isLeapYear(year))

                                                System.out.println("It is leap year");

                                else

                                                System.out.println("Not leap year");

                               

                }

 

}