java.lang package

 

1. Object class

    void add(int a){

    }

    void add(String s){

    }

    void add(Box b){

    }

    void add(Test t){

    }

    void add(Object o){ //any class as argument

    }

 

2. Wrapper class

     - the class thats supports primitive datatype

      int - Integer

      byte - Byte

      boolean - Boolean

      short - Short

      long - Long

      float - Float

      double - Double

      char - Character

    - All wrapper class are immutable

    - Character and Boolean class present in Object class

    - Integer,Byte,Short,Long,Float,Double present is abstract class Number

 

Float class

   - used to perform operation on float data type

 

Constructors

  1. Float(float f)

         Float f1=new Float(3.14f);

         sop(f1); //3.14

  2. Float(double d)

         Float f2=new Float(3.14);

         sop(f2);  //3.14

  3. Float(String s) throws NumberFormatException

         Float f3=new Float("3.14");

         sop(f3);  //3.14

         Float f4=new Float("abc");

         sop(f4); //it throws NumberFormatException

 

Methods

1. static int compare(float f1,float f2)

      - used to compare 2 float datatype, if they are equal it returns 0, if greater +1 and lesser means it return -1

 

int a=5, b=5;

if(a==b){

 

}

float a=3.14, b=3.14;

 

2. int compareTo(Float f1)

     - used to compare two Float object

3. String toString()

4. int hashCode()

5. boolean equals(Float f)

6. static float parseFloat(String s)

        - used to convert String to float datatype

7. static Float valueOf(float f)

        - used to convert float datatype to Float wrapper class

8. float floatValue()

        - used to convert Float wrapper class to float datatype

 

Variables/constant

1. public static final int MAX_VALUE

2. public static final int MIN_VALUE

3. public static final int TYPE

 

 

2. Double class

     - to perform operation on double datatype

 

Constructor

    1. Double(double d)

          Double d1=new Double(2.45);

           sop(d1); //2.45

    2. Double(String s) throws NumberFormatException

          Double d2=new Double("2.45");

           sop(d2); 2.45

         Double d3=new Double("www");

           sop(d3); //NumberFormatException

 

Methods

1. static double parseDouble(String s)

2. static Double valueOf(double d)

3. double doubleValue()

4. String toString()

5. int hashCode()

6. boolean equals(Double d)

 

Variable/Constant

1. public static final int MAX_VALUE

2. public static final int MIN_VALUE

3. public static final int TYPE

 

3. Integer, Byte, Short, Long

       - used to perform operation on int, byte, short and long data type respectively

 

Constructor

1. Integer(int a)

     Integer i=new Integer(42);

   Integer(String s)throws NumberFormatException

      Integer i=new Integer("42");

      Integer i=new Integer("abc");  //NFE

 

2. Byte(byte b)

      Byte b1=new Byte(10); -- wrong

      Byte b1=new Byte((byte)10);  -- correct

   Byte(String s) throws NumberFormatException

      Byte b2=new Byte("10");  --correct

      Byte b2=new Byte("abc"); //NPE

 

3. Short(short s)

      Short s1=new Short(23); --wrong

      Short s1=new Short((short)23); --correc

   Short(String s) throws NumberFormatException

      Short s2=new Short("23");

      Short s2=new Short("abc"); //NFE

 

4. Long(long l)

      Long l1=new Long(12); --correct

      Long l2=new Long(12l); --correct

   Long(String s) throws NumberFormatException

      Long l3=new Long("12");  -- correct

       Long l3=new Long("abc");  //NFE

 

Methods

1. static int parseInt(String s)

2. static byte parseByte(String s)

3. static short parseShort(String s)

4. static long parseLong(String s)

5. static Integer valueOf(int i)

6. int intValue()

7. static Byte valueOf(byte b)

8. byte byteValue()

9. static Integer toBinaryString(int i)

10. static Integer toOctalString(int i)

11. static Integer toHexString(int i)

12. static int parseInt(Strint s,int radix)

13. static byte parseByte(String s,int radix)

14. static short parseShort(String s,int radix)

15. static long parseLong(String s,int radix)

 

Constants

1. MAX_VALUE

2. MIN_VALUE

3. TYPE

 

 

4. Boolean class

       - used to perform operation on boolean datatype

 

Constructor

     - Boolean(boolean b)

     - Boolean(String d)

 

Methods

1. static boolean parseBoolean(String s)

2. static Boolean valueOf(boolean b)

3. boolean booleanValue()

4. String toString()

5. int hashCode()

6. boolean equals(Object c)

 

Constants

1. Boolean.TRUE

2. Boolean.FALSE

3. Boolean.TYPE

 

5. Character class

       - used to perform operation on char datatype

 

Constructor

    - Character(char c)

 

Methods

1. boolean isLetter(char c)

2. boolean isDigit(char c)

3. boolean isWhitespace(char c)

4. boolean isUpperCase(char c)

5. boolean isLowerCase(char c)

6. char toUpperCase(char c)

7. char toLowerCase(char c)

8. String toString()

 

AutoBoxing and Unboxing

     - Available only from JDK1.5

     - Automatic conversion of datatype to wrapper class and wrapper class to datatype

 

with boxing                                                                                         without boxing

 

int i;                                                                                                       int i;

Integer j; //object declaration with null ref           Integer j;

 

i=10;                                                                                                      i=10;

j=5;  //datatype to wrapper class(autoboxing)           j=new Integer(5);

 

i=j;  //wrapper class to data type(unboxing)            i=j.intValue();

 

 

 

String class

   - String class is a final class present in java.lang

   - String is immutable class where we cant change its size at runtime, it fixed length of character

   - String class implements CharSequence, Cloneable, Serializable interface

   - String is class(whenever we use new operator) or literals

 

Constructor

   1. String(String s)

   2. String(byte[])

   3. String(byte[] b, int start, int noofchar)

   4. String(char[] c)

   5. String(char[] c, int start, int noofchar)

   6. String()

   7. String(StringBuffer sb)

 

Methods

1. String toString()

2. char charAt(int location)

     - return single char from String

3. void getChars(int start,int end, char[] buf, int targetstart)

     - return group of char from String

4. int length() - length of the String

5. byte[] getBytes() - convert String to byte[]

6. char[] toCharArray() - convert String to char[]

7. boolean startsWith(String s) - to check whether String starts with particular string

8. boolean endsWith(String s) - to check whether String ends with particular String

9. boolean equals(String s)

    - check the equality of the content by taking the case into consideration

10. boolean equalsIgnoreCase(String s)

     - check the equality of the content by ignoring the case

11. == - check equality of object reference

12. String toUpperCase()

13. String toLowerCase()

14. String subString(int start)

15. String subString(int start,int end)

16. String concat(String s) - used to concat the string

    + operator is used for concatencation

17. String replace(char original, char replacement)

18. String trim() - remove the leading and trailing space  

19. String strip()

    String stripLeading()

    String stripTrailing()

       - available from jdk11

20. int indexOf(char ch)

    int indexOf(String s)

    int indexOf(char ch,int index)

    int indexOf(String s, int index)

        - used to return the position of first occurence of char in given string

21. int lastIndexOf(char ch)

    int lastIndexOf(String s)

    int lastIindexOf(char ch,int index)

    int lastIndexOf(String s, int index)

        - used to return the position of first occurence of char in given string

22. String[] split(String delimiter)

    String[] split(String delimiter, int limit)

        - used to split the string based on some delimiter

23. boolean matches(String s) - used to match the string based on regex

24. boolean regionMatches(boolean ignorecase, int toffset, String other, int ooffset, int length)

      - used to match part of string

package com.day4;

 

public class Example7 {

 

                public static void main(String[] args) {

                                String s1="Hello";

                                System.out.println(s1.charAt(1)); //e

                               

                                String s2="This is a demo of getChars method";

                                int start=10, end=14;

                                char buf[]=new char[end-start];

                                s2.getChars(10,14,buf,0);

                                System.out.println(buf); //demo

                               

                                String s3="hello";

                                System.out.println(s3.length());

                               

                                String s4="ABCD";

                                byte[] b=s4.getBytes();

                                for(byte b1:b)

                                                System.out.println(b1);

                               

                                String s5="Java";

                                char c[]=s5.toCharArray();

                                for(char c1:c)

                                                System.out.println(c1);

                               

                                String s6="foobar";

                                System.out.println(s6.startsWith("foo"));

                                System.out.println(s6.endsWith("bar"));

                               

                                String s7=new String("hello");

                                String s8=new String("HELLO");

                                String s9=new String("hello");

                                System.out.println(s7.equals(s8));

                                System.out.println(s7.equals(s9));

                                System.out.println(s7.equalsIgnoreCase(s8));

                                System.out.println(s7==s8);

                                String s10=s8;

                                System.out.println(s10==s8);

                               

                                System.out.println(s7.toUpperCase());

                                System.out.println(s8.toLowerCase());

                               

                                String s11="helloworld";

                                System.out.println(s11.substring(6)); //orld

                                System.out.println(s11.substring(2,5));//start to end-1

               

                                String s12="hello";

                                String s13=new String("hello");

                                System.out.println(s12.concat("world"));

                                System.out.println(s12.length());

                                System.out.println(s13.concat("world"));

                                System.out.println(s13.length());

                               

                                String s14="hello";

                                System.out.println(s14.replace('e','i'));

                               

                                String s15=" hello world ";

                                System.out.println(s15.length()); //13

                                System.out.println(s15.trim());//hello world

                                System.out.println(s15.length()); //13

                                String s16=s15.trim();

                                System.out.println(s16.length()); //11

                               

                                String s17="Now is the time for all goodmen to"+

                                           "come to their country and pay their"+

                                                                   "due taxes";

                                System.out.println(s17.indexOf('t')); //7

                                System.out.println(s17.indexOf("the")); //7

                                System.out.println(s17.indexOf('t',9)); //11

                                System.out.println(s17.indexOf("the",10)); //43

                                System.out.println(s17.indexOf("oooo")); //-1

                                System.out.println(s17.lastIndexOf('t'));

                                System.out.println(s17.lastIndexOf("the"));

                               

                                String s18="one-two-three";

                                String temp[]=s18.split("-");

                                for(String a:temp)

                                                System.out.println(a);

                               

                                String s19="one.two.three.four.five";

                                String temp1[]=s19.split("[file://.]\\.",3);

                                for(String a1:temp1)

                                                System.out.println(a1);

                               

                                String s20="A*bunch*of*stars";

                                String temp2[]=s20.split("\\*");

                                for(String a2:temp2)

                                                System.out.println(a2);

                               

                                String s21="10 home world of 20";

                                String temp3[]=s21.split("\\d");

                                for(String a3:temp3)

                                                System.out.println(a3);

                                String temp4[]=s21.split(" ");

                                //s21.split("\\s");

                                for(String a4:temp4)

                                                System.out.println(a4);

                               

                                String s22="No concession, no concillation,"+

                                           "no confident,and no give and take";

                                String delimit="concession|"

                                                                + "concillation|confident|"

                                                                + "(give and take)";

                                String temp5[]=s22.split(delimit);

                                for(String a5:temp5)

                                                System.out.println(a5);

                               

                                String s23="Welcome to Java program";

                                System.out.println(s23.matches("(.*) Java (.*)"));

                                System.out.println(s23.matches("Java (.*)"));

                                System.out.println(s23.matches("Welcome (.*)"));

                               

                                String s24="ABC Windows test";

                                boolean b1=s24.regionMatches(true,4,"Windows",0,7);

                                System.out.println(b1);

                }

 

}

 

 

3. StringBuffer class - java.lang

      - StringBuffer is mutable because it has variable no of characters

      - It is synchronized or threadsafe

      - We cannot override equals() in StringBuffer

 

Constructor

   1. StringBuffer()

   2. StringBuffer(int capacity)

   3. StringBuffer(String s)

 

Methods

1. int length()

2. int capacity() - default capacity is 16

3. void ensureCapacity(int capacity) - we want set to capacity

  if the character length is greater than ensurecapacity value, then it caluclates the capacity as twice of original capacity+2 = 21+21+2 =44

4. void setLength(int len)

5. char charAt(int loc)

6. void setCharAt(int loc, char c)

7. void insert(int i,String s)

8. void append(String s)

9. StringBuffer reverse()

10. void delete(int start,int end) - delete group of char

    void deleteCharAt(int loc) - delete single char

11. void replace(int start,int end, String s)

 

package com.day4;

 

public class Example8 {

 

                public static void main(String[] args) {

                                StringBuffer sb=new StringBuffer("hellohellohellohello");

                                System.out.println(sb);  //hello

                                System.out.println(sb.length());  //5

                                System.out.println(sb.capacity()); //16+5=21

                               

                                sb.ensureCapacity(21);

                                System.out.println(sb.capacity());

                               

                                StringBuffer sb1=new StringBuffer();

                                System.out.println(sb1.capacity()); //16

                                sb1.ensureCapacity(18);

                                System.out.println(sb1.capacity()); //16+16+2=34

                               

                                StringBuffer sb2=new StringBuffer("hello");

                                System.out.println(sb2); //hello

                                System.out.println(sb2.length()); //5

                                sb2.setLength(2);

                                System.out.println(sb2); //he

                                System.out.println(sb2.charAt(1));//e

                                sb2.setCharAt(1,'i');

                                System.out.println(sb2); //hi

                               

                                StringBuffer sb3=new StringBuffer("I Java");

                                sb3.insert(2, "like ");

                                System.out.println(sb3);

                               

                                StringBuffer sb4=new StringBuffer();

                                sb4.append("hello");

                                System.out.println(sb4); //hello

                                sb4.append("world");

                                System.out.println(sb4); //helloworld

                               

                                StringBuffer sb5=new StringBuffer("abcd");

                                System.out.println(sb5.reverse()); //dcba

                               

                                StringBuffer sb6=new StringBuffer("This is a test");

                                System.out.println(sb6);  //This is a test

                                sb6.delete(5, 8);

                                System.out.println(sb6); //This a test

                                sb6.deleteCharAt(0);

                                System.out.println(sb6); //his a test

                               

                                StringBuffer sb7=new StringBuffer("This is a test");

                                sb7.replace(5,8,"was ");

                                System.out.println(sb7);

                }

 

}

 

 

4. StringBuilder class

      - Available from JDK1.5

      - It is similar to StringBuffer, StringBuilder is not synchronized or thread safe so it gives better performance than StringBuffer

 