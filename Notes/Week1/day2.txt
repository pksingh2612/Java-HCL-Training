Array

  - collection of similar data type

                                int a[]= {1,2,3}; //declaring and initializing the array -- correct


                                /*int a1[];  //declaring the array -- wrong

                                a1[0]=1;

                                a1[1]=2;*/


                                //int a2[3]= {1,2,3};  --wrong


                                int a3[]=new int[3];  //declaraing the array --correct

                                a3[0]=1;

                                a3[1]=2;

                                a3[2]=3;

                                int[] a4=new int[3];  //declaraing the array --correct


                                //int[] a5=new int[-3]; //correct - we can declare the index in negative but at runtime

                                                       //it will show NegativeArraySizeException

                               

                                int a6[]=new int[]{1,2,3}; //correct - Anonymous Array

                                //int a7[]=new int[3] {1,2,3}; //wrong

                               

                                int a8[]=new int[4];

                                a8[0]=10;

                                a8[1]=11;

                                a8[2]=12;

                                a8[3]=13;

                               

                                for(int i=0; i<a8.length;i++)

          System.out.println(a8[i]);

                               

                                System.out.println();

                               

                                //JDK1.5 we introduce forEach statement

                                //1. variable should be declared only inside for loop and of same data type like array

                                //2. 1D array is stored in a variable, 2D array is stored in 1D array and so on

                                for(int j:a8)

                                                System.out.println(j);

                               

                               

                                System.out.println();

                               

                                int b[][]= {{1,2},{3,4}};  //correct - declaring and initializing the array

                               

                                //int b1[2][2]= {{1,2},{3,4}}; //wrong

                               

                                int b1[][]=new int[2][2];   //correct

                                int[][] b2=new int[2][2];   //correct

                                int[] b3[]=new int[2][2];  //correct

                               

                                int b4[][]=new int[2][2];  //declaring

                                b4[0][0]=1;  b4[0][1]=2;

                                b4[1][0]=3;  b4[1][1]=4;

                               

                                for(int i=0;i<b4.length;i++) {

                                                for(int j=0;j<b4.length;j++) {

                                                                System.out.println(b4[i][j]);

                                                }

                                }

 

                for(int i=0;i<2;i++) {

                                                for(int j=0;j<2;j++) {

                                                                System.out.println(b4[i][j]);

                                if(j==0) break;

                                                }

                                }

b4[0][0]=1          

b4[1][0]=3                           System.out.println();

                              for(int c1[]:b4)

                                                for(int d1:c1)

                                       System.out.println(d1);

                               

                               

                                int b5[][]=new int[5][5]; //5*5=25*4=100 bytes of memory

                                b5[0][0]=1;

                                b5[1][0]=2;   b5[1][1]=3; //12 bytes of memory is used

               

                    //Arrays of Array - to avoid memory wastage

                                //specify the size for only row

                                int b6[][]=new int[5][];

                                b6[0]=new int[2];

                                b6[1]=new int[1];

                               

                                b6[0][0]=1;

                                b6[0][1]=2;

                               

                                b6[1][0]=3;

 

Heap and Stack

 

heap memory - used to store the object and global variables

 

Stack memory - used to store local variables and function calls



this keyword

  - used to refer the current class variable

  - used when parameter name and instance variable name are same

 

this constructor

   - used to invoke different constructor of the same class using single object

   - this constructor should always present in the first line of ur code

 

Polymorphism - one class that take many forms

 

Static/Compile time polymorphism

1. Method overloading

      - same method name, but different number,order and data type of argument present in the same class and it dosent check the return type


package com.pack;

class OverloadDemo{

                void test() {

                                System.out.println("No parameters");

                }

                void test(int a) {

                                System.out.println("a = "+a);

                }

                void test(int a,int b) {

                                System.out.println("a = "+a+" "+"b = "+b);

                }

                double test(double a) {

                                return a*a;

                }

}

public class Example7 {

                public static void main(String[] args) {

                                OverloadDemo ob=new OverloadDemo();

                                ob.test();

                                ob.test(10);

                                ob.test(10,20);

                                double result=ob.test(123.4);

                                System.out.println(result);

 

                }

 

}

 

2. Constructor overloading

    - same constructor name, but different number,order and data type of argument present in the same class

 

package com.pack;

 

class Box3{

                double width;

                double height;

                double depth;

               

                Box3(){

                                width=10;

                                height=10;

                                depth=10;

                }

                Box3(double w,double h,double d){

                                width=w;

                                height=h;

                                depth=d;

                }

                Box3(int len){

                                width=depth=height=len;

                }

                Box3(Box3 b){//object of Box3 class

                                width=b.width;

                                height=b.height;

                                depth=b.depth;

                }

                double volume() {

                                return width*height*depth;

                }

}

 

public class Example8 {

 

                public static void main(String[] args) {

                                Box3 b1=new Box3();

                                Box3 b2=new Box3(5,10,15);

                                Box3 b3=new Box3(7);

                                Box3 b4=new Box3(b2);

                                double vol;

                                vol=b1.volume();

                                System.out.println(vol);

                                vol=b2.volume();

                                System.out.println(vol);

                                vol=b3.volume();

                                System.out.println(vol);

                                vol=b4.volume();

                                System.out.println(vol);

                }

 

}

 

 

Accessor and Mutator methods

 

1. Mutator method - setter method - used to set any value

void setAge(int age){

   this.age=age;

}

2. Accessor method - getter method - used to get the value

int getAge(){

   return age;

}

 

 

Access specifier - 4 types and it can be applied to everything (ie) class, method, variable, constructor

 

Non access specifier - it has its own restriction

 

static keyword

   - it is a non access specifier

   - If a class is declared as static, there is no need to create an object. Only inner class can be declared as
     static and outer class cannot be static

   - If a method is declared as static and if it is present in same class it can be called by methodname() and
     if it is present in different class it is called by classname.methodname()

   - If a variable is declared as static it acts as global variable and if it is present in same class it can be called
     by variablename and if it is present in different class it is called by classname.variablename

   - static method will access only static content, it it is not static then it is accessed by creating an object

public class Example9 {

                static int b;

     int a;

                public static void main(String[] args) {

                   Example9 e=new Example9();

                   System.out.println(e.a);

                   System.out.println(b);

                }

}

 

   - But if a class contains static block then it will executed before the main method

        static {

          //static block

        }

   

public class Example10 {

                static int a=3;

                static int b;

               

                static {

                                System.out.println("Static block initialized");

                                b=a*4;

                }

                static void meth(int x) {

                                System.out.println(a);

                                System.out.println(b);

                                System.out.println(x);

                }

 

                public static void main(String[] args) {

                                meth(43);

                }

 

}

 

class Test1{

                static int a=20;

                static int b=40;

                static void demo() {

                                System.out.println(b);

                }

}

public class Example11 {

 

                public static void main(String[] args) {

                                Test1.demo();

                                System.out.println(Test1.a);

                }

 

}

 

 

System.out.println();

System is a predefined class, out is an object of PrintStream and  it is static field of System. println() is method of PrintStream class

public class System{

   static PrintStream out;

}

 

Nested class and Inner class

  - Class within another class is called Nested class

  - Inside class can be either static or non static

  - Non static inner class is called inner class\

  - Static inner class is called static class

  - If we want to access outer class variable inside inner class then it should be either an instance variable or declared as final

 

class A{

  class B{  //inner class

    

  }

}

 

class A{

static class B{  //static class

}

}

 

class Outer{

                static int var=100;

                /*void show() {

                                Inner i=new Inner();

                                i.display();

                }*/

                static class Inner{

                                int x=10;

                                void display() {

                                                System.out.println(x);

                                                System.out.println(var);

                                }

                }

               

}

public class Example12 {

                public static void main(String[] args) {

                                /*Outer o=new Outer();

                                o.show();*/

                                /*Outer.Inner o=new Outer().new Inner();

                                o.display();*/

                                Outer.Inner o=new Outer.Inner();

                                o.display();

                }

 

}

 

 

Inheritance

   - Accessing the properties of one class into another class

   - code reusability

   - extends keyword

 

class A{

   parent/super/base class

}

class B extends A{

   child/sub/derived class

}

class Main{ PSVM {

}